def unitTest(gitlabSourceCodeCredId=null,sonarCredId=null) {

  // use nuget from host
  sh 'cp -r /var/jenkins_home/.nuget/. $WORKSPACE/nuget'
  sh """
  docker run -i --rm -v "\$(pwd)/src:/src" \
    -v "\$(pwd)/nuget:/nuget" \
    --entrypoint /build/entrypoint.sh \
    -e PRODUCT_NAME="api-unit-test" \
    -e BUILDER_CSPROJ="TestProject"	\
    -e NUGET_PACKAGES="/nuget/packages" \
    --network=host \
    dotnetsdk8-builder:8.0 test
  """

  // sh """
  // docker run -i --rm -v "\$(pwd)/src:/src" \
  //   --entrypoint /build/entrypoint.sh \
  //   -e PRODUCT_NAME="api-unit-test" \
  //   -e BUILDER_CSPROJ="TestProject"	\
  //   --network=host \
  //   dotnetsdk8-builder:8.0 test
  // """

}

pipeline {
  agent any
  environment {
    // dotnet tools
    PATH = "/var/jenkins_home/.dotnet/tools:$PATH"
  }
  options {
    // This is required if you want to clean before build
    skipDefaultCheckout(true)
  }
  stages {
    stage('Init') {
      steps {
        echo '::: Init ************************************************************'
        // Clean before build
        cleanWs()
        echo "Building ${env.JOB_NAME}..."        
      }
    }
    stage('Test') {
      steps {
        echo '::: Test ************************************************************'

        // sh 'ping -c 1 sonarqube'

        // clone project
        sh 'cp -r /shared/. $WORKSPACE/src'
        
        // sh 'env'        

        // sh 'docker images'

        // To remove all images
        // docker rmi $(docker images -q)

        echo '::: Remove image ************************************************************'
        // remove image
        sh """        
        # > /dev/null 2>&1 = Discards both the standard output and standard error of a command
        # docker rmi dotnetsdk8-builder:8.0 > /dev/null 2>&1 && echo "image removed" || true

        # 2>/dev/null = Discard standard error of a command
        docker rmi dotnetsdk8-builder:8.0 2>/dev/null && echo "image removed" || { echo "image not found"; true; }
        """

        echo '::: Build image ************************************************************'
        // run shell script for building an image
        sh '''
        cp -r /dockerfiles/. $WORKSPACE/dockerfiles
        cd dockerfiles
        ./build/build-dotnetsdk8-builder.sh

        cd ..
        '''

        echo '::: Call unitTest() ************************************************************'
        unitTest()
        echo '::: ============================================================================='
      }
    }
    // stage('Scan') {
    //   steps {
    //     echo '::: Scan ************************************************************'

    //     // clone project
    //     sh 'cp -r /shared/. $WORKSPACE'
    //     sh 'env'
    //     sh 'pwd'
    //     sh 'ls -l'

    //     // sh '''      
    //     // dotnet restore -p:TargetFrameworks=net8.0 -p:PackTargetFramework=net8.0
    //     // dotnet build --no-restore        
    //     // '''

    //     // run --> cs-sonarscan.sh
        
    //   }
    // }
  }
  post {
    always {
      echo '::: POST ************************************************************'
      // Clean after build
      // cleanWs(cleanWhenNotBuilt: false,
      //         deleteDirs: true,
      //         disableDeferredWipeout: true,
      //         notFailBuild: true,
      //         patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
      //                     [pattern: '.propsfile', type: 'EXCLUDE']])
    }
    success {
      echo "Build ID: ${BUILD_ID}, ${JOB_NAME} succeeded"
    }
    failure {
      echo "Build ID: ${BUILD_ID}, ${JOB_NAME} failed"
    }
    aborted {
      echo "Build ID: ${BUILD_ID}, ${JOB_NAME} aborted"
    }
  }
}