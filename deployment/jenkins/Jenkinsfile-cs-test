def newPath(path, newPath) {
    return "$path:$newPath"
}

def test(String specificFile, String logger)
{
	try {	
    sh 'dotnet test ${specificFile} --no-build --no-restore --logger:"${logger}"'
	}
  catch (Exception ex) {
    throw ex
  }
}

pipeline {
  agent any
  environment {
    // DOTNET_SYSTEM_GLOBALIZATION_INVARIANT = "1"
    // DOTNET_ROOT = "$HOME/.dotnet"
    // PATH = newPath("$PATH", "$DOTNET_ROOT")
    SOURCE_PATH = "/app"
  }
  options {
    // This is required if you want to clean before build
    skipDefaultCheckout(true)
  }
  stages {
    stage('Init') {
      steps {
        echo '::: Init ************************************************************'
        // Clean before build
        cleanWs()

        // sh 'env'

        // sh "echo $WORKSPACE"
        sh "echo $DOTNET_ROOT"
        // sh '''
        // cd /usr/local/bin
        // ls -l
        // cd ~
        // ls -la
        // cd .dotnet
        // ls -la
        // ./dotnet --version
        // '''        
        
        // sh 'which dotnet'
        // sh "dotnet --version"
        // sh 'dotnet --list-sdks'
        // sh 'dotnet --list-runtimes'
      }
    }
    stage('Build') {
      steps {
        echo '::: SCM Checkout ************************************************************'

        sh 'cp -r /unit_test/cs/TestProject1/. $WORKSPACE/test'
        
        //  go to unit-test root dir
        sh '''
        cd $WORKSPACE/test
        pwd
        ls -l
        dotnet restore
        dotnet build
        '''

        // publish
        // dotnet publish ./ '-p:TargetFrameworks=net8.0' '-p:PackTargetFramework=net8.0' -c Release -o "./out" -p:UseAppHost=false
      }
    }
    stage('Test') {
      steps {
        echo '::: Test ************************************************************'

        sh '''
        cd $WORKSPACE/test
        dotnet test --no-build --no-restore --logger:"junit;LogFilePath=test-result-2.xml" || true
        ls -l
        '''

        // script {
        //   catchError(stageResult: 'SUCCESS') {
        //     println("Step error!!!")
        //     sh 'exit 1'
        //   }
        // }
      }
    }
    stage('Test2') {
      steps {
        echo '::: Test2 ************************************************************'

        // Test result format
        // dotnet test --no-build --no-restore --logger "trx;LogFileName=TestResults.trx"
        // dotnet test --logger "html;LogFileName=TestResults.html"
        // dotnet test --logger "trx;LogFileName=TestResults.trx"
        // dotnet test --logger:"junit;LogFilePath=test-result.xml"
        // dotnet test --logger "xunit;LogFileName=xunit-results.xml"

        // junit format
        // dotnet test --no-build --no-restore --logger:"junit;LogFilePath=test-result.xml" || true

        // xunit format
        // dotnet test --no-build --no-restore --logger:"xunit;LogFileName=xunit-results.xml" || true
        
        // sh 'cp -r /source/. $WORKSPACE'
        sh 'cp -r /unit_test/cs/TestProject1/. $WORKSPACE'

        sh '''
        pwd
        echo "junit ======================================"
        dotnet test ./TestProject1.csproj --logger:"junit;LogFilePath=test-result.xml" || true
        echo "======================================"
        ls -l
        '''      
      }
    }
  }
  post {
    always {
      echo '::: POST ************************************************************'

      sh '''
      pwd
      ls -l
      cd test
      ls -l
      cat ${WORKSPACE}/test/test-result-2.xml
      '''

      script {
        // junit '**/*.xml'

        // Record specific test result xml file
        def resultPath = "${WORKSPACE}/test/test-result-2.xml"
        println("[Test] resultPath: ${resultPath}")
        def junitTestSummary = junit(testResults: "**/test/test-result-2.xml", allowEmptyResults: true, skipMarkingBuildUnstable: true)

        // Record multiple test result xml files
        // def junitTestSummary = junit(testResults: '**/*.xml', allowEmptyResults: true, skipMarkingBuildUnstable: true)
        
        println("[junit] Test total: ${junitTestSummary.totalCount}")
        
        // junitTestSummary.[failCount, totalCount, skipCount, passCount]
        if(junitTestSummary.failCount>0){
          println("Failing the pipeline. Because, there are ${junitTestSummary.failCount} tests failed")
          // error("Failing the pipeline. Because, there are ${junitTestSummary.failCount} tests failed")
        }
      }
      
      // check pipeline result
      // sh "test ${currentBuild.currentResult} != UNSTABLE"

      // script {
      //   if (currentBuild.currentResult == 'UNSTABLE') {
      //     currentBuild.result = "SUCCESS"
      //     // currentBuild.result = "ERROR"
      //     sh 'echo "Unstable build, exiting now..."'
      //   }
      // }

      echo '::: POST ========================= ************************************************************'

      // archive file
      // archiveArtifacts artifacts: '**/test-result.xml', allowEmptyArchive: true

      // parser: COBERTURA, CLOVER, GO_COV, JACOCO, JUNIT, METRICS, NUNIT, OPENCOVER, PIT, VECTORCAST, XUNIT
      // recordCoverage(
      //   // xunit
      //   // tools: [[parser: 'JUNIT', pattern: '**/test-result.xml']],
      //   tools: [[parser: 'XUNIT', pattern: '**/xunit-results.xml']],
      //   qualityGates: [
      //       [metric: 'LINE', baseline: 'PROJECT', threshold: 60, criticality: 'UNSTABLE'],
      //       [metric: 'BRANCH', baseline: 'PROJECT', threshold: 50, criticality: 'FAILURE']
      //   ]
      // )

      // Clean after build
      cleanWs(cleanWhenNotBuilt: false,
              deleteDirs: true,
              disableDeferredWipeout: true,
              notFailBuild: true,
              patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                          [pattern: '.propsfile', type: 'EXCLUDE']])
    }
    success {
      echo "Build ID: ${BUILD_ID}, ${JOB_NAME} succeeded"
    }
    failure {
      echo "Build ID: ${BUILD_ID}, ${JOB_NAME} failed"
    }
    aborted {
      echo "Build ID: ${BUILD_ID}, ${JOB_NAME} aborted"
    }
  }
}