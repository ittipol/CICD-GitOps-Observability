services:

  jenkins:
    build: .
    container_name: jenkins
    ports:
      - 8080:8080
      - 50000:50000
    environment:
      DOCKER_HOST: "tcp://docker:2376"
      DOCKER_CERT_PATH: "/certs/client"
      DOCKER_TLS_VERIFY: 1
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock
      - jenkins-data:/var/jenkins_home
      - jenkins-docker-certs:/certs/client:ro            
    depends_on:
      - docker-dind
    networks:
      - jenkins

  docker-dind:
    # image: docker:dind
    build: ./docker/dind
    container_name: docker-in-docker
    privileged: true
    volumes:
      - jenkins-data:/var/jenkins_home
      - jenkins-docker-certs:/certs/client
    networks:
      jenkins:
        aliases:
          - docker
      
  docker-registry:
    image: registry:2.8.3
    container_name: docker-registry
    environment:
      # REGISTRY_HTTP_ADDR: 0.0.0.0:5000
      REGISTRY_HTTP_TLS_CERTIFICATE: "/tls/server.crt"
      REGISTRY_HTTP_TLS_KEY: "/tls/server.pem"
      REGISTRY_AUTH: "htpasswd"
      REGISTRY_AUTH_HTPASSWD_REALM: "Registry Realm"
      REGISTRY_AUTH_HTPASSWD_PATH: "/auth/htpasswd"
      REGISTRY_STORAGE_DELETE_ENABLED: "true"
    volumes:
      - ./docker/dind/tls:/tls
      - ./registry_auth:/auth
    networks:
      jenkins:
        aliases:
          - registry
  
  sonarqube:
    image: sonarqube:9-community
    container_name: sonarqube
    restart: unless-stopped
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - postgres
    ports:
      - "9000:9000"
    networks:
      - jenkins

  postgres:
    image: postgres:15.2-alpine3.17
    container_name: postgresql
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - jenkins

  # app:
  #   image: node:16-alpine
  #   container_name: app
  #   command: tail -F /dev/null
    
networks:
  jenkins:
    driver: bridge

volumes:
  jenkins-data:
    external: false
  jenkins-docker-certs:
    external: false
  sonarqube_data:
    external: false
  sonarqube_extensions:
    external: false
  sonarqube_logs:
    external: false
  postgresql:
    external: false
  postgresql_data:
    external: false